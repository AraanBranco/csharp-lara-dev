webpackJsonp([1],{DOf8:function(e,t,n){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=n("U7vG"),s=function(e){return e&&e.__esModule?e:{default:e}}(l),d=[],c=function(e){function t(e){a(this,t);var n=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={isLoading:!0,developers:[]},n.searchDeveloper=n.searchDeveloper.bind(n),n}return o(t,e),i(t,[{key:"componentDidMount",value:function(){var e=this;fetch("https://api.github.com/repos/prokawsar/dia-students/contents/personals.json").then(function(e){return e.json()}).then(function(e){return atob(e.content)}).then(function(e){return JSON.parse(e)}).then(function(t){var n=t;d=n,e.setState({isLoading:!1,developers:n})})}},{key:"searchDeveloper",value:function(e){var t=d;t=t.filter(function(t){return-1!==t.name.toLowerCase().search(e.target.value.toLowerCase())||-1!==t.company.toLowerCase().search(e.target.value.toLowerCase())||-1!==t.city.toLowerCase().search(e.target.value.toLowerCase())||-1!==t.github.toLowerCase().search(e.target.value.toLowerCase())||-1!==t.email.toLowerCase().search(e.target.value.toLowerCase())||t.skills.find(function(t){return t.toLowerCase().includes(e.target.value.toLowerCase())})}),this.setState({developers:t})}},{key:"render",value:function(){return s.default.createElement("div",null,s.default.createElement("a",{target:"_blank",href:"https://github.com/prokawsar",className:"github-corner","aria-label":"View source on Github"},s.default.createElement("svg",{width:"80",height:"80",viewBox:"0 0 250 250","aria-hidden":"true"},s.default.createElement("path",{d:"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"}),s.default.createElement("path",{d:"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2",fill:"currentColor",className:"octo-arm"}),s.default.createElement("path",{d:"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z",fill:"currentColor",className:"octo-body"}))),s.default.createElement("br",null),s.default.createElement("div",{className:"hd1"}," DIA Alumni and Students "),s.default.createElement("div",{className:"hd-small"},"Alumni and upcomming students of Unviersity of Greenwich from Bangladesh."),s.default.createElement("div",{className:"search-div"},s.default.createElement("input",{type:"text",placeholder:"Search",onChange:this.searchDeveloper,className:"search"})),s.default.createElement("div",{className:"button"},s.default.createElement("div",{className:"dev "},s.default.createElement("div",{className:"dev-desc"},s.default.createElement("a",{href:"https://github.com/prokawsar/dia-students",target:"_blank"},"Add_Me")))),s.default.createElement("div",null,this.state.isLoading?s.default.createElement("div",{className:"center"},s.default.createElement("img",{src:"loader.gif",className:"loader",alt:"loader"})):s.default.createElement("div",{className:"developer-list"},this.state.developers.map(function(e,t){return s.default.createElement("div",{className:"developer",key:t},s.default.createElement("div",{className:"dev"},s.default.createElement("div",{className:"dev-desc"},s.default.createElement("div",{className:"dev--name"},e.name),s.default.createElement("div",{className:"dev--email"},s.default.createElement("a",{href:"mailto:"+e.email,target:"_top"},e.email)),s.default.createElement("div",{className:"dev--city"},"Phone: ",e.phone),s.default.createElement("div",{className:"dev--city"},"Admission Year: ",e.admit_year),s.default.createElement("div",{className:"dev--city"},"Batch: ",e.batch),s.default.createElement("div",{className:"dev--skills"},s.default.createElement("span",null,e.role," at ",e.company_institute)),s.default.createElement("div",{className:"dev--city"},"Working in: ",e.working_in),s.default.createElement("div",{className:"dev--city"},e.city)),s.default.createElement("div",{className:"dev-avatar"},s.default.createElement("a",{href:"https://github.com/"+e.github,target:"_blank"},s.default.createElement("img",{src:"https://avatars.githubusercontent.com/"+e.github,className:"profile-image",alt:"Github"}),s.default.createElement("div",{className:"dev--skills"},s.default.createElement("span",null,"Github")))),s.default.createElement("div",{className:"dev-avatar"},s.default.createElement("a",{href:"https://facebook.com/"+e.facebook,target:"_blank"},s.default.createElement("img",{src:"https://avatars.io/facebook/"+e.facebook+"/large",className:"profile-image",alt:"Facebook Profile"}),s.default.createElement("div",{className:"dev--skills"},s.default.createElement("span",null,"Facebook"))))))}))),s.default.createElement("div",{className:"footer"},"Modified by ",s.default.createElement("span",{className:"heart"},"â™¥")," ProKawsar"))}}]),t}(l.Component);t.default=c},"XgI/":function(e,t,n){t=e.exports=n("FZ+f")(void 0),t.push([e.i,"@import url(https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700);",""]),t.push([e.i,"body {\n  font-family: 'Roboto', sans-serif; }\n\na {\n  text-decoration: none; }\n\n.center {\n  text-align: center; }\n\n.loader {\n  height: 60px; }\n\n.hd1 {\n  font-size: 30px;\n  font-weight: 300;\n  text-align: center;\n  transition: 0.4s all ease; }\n\n.hd-small {\n  font-size: 18px;\n  font-weight: 100;\n  margin: 10px 0;\n  text-align: center; }\n\n.search-div {\n  margin: 30px auto;\n  text-align: center; }\n  .search-div .search {\n    border: solid 1px #dcdcdc;\n    border-radius: 3px;\n    font-size: 16px;\n    font-weight: 300;\n    height: 35px;\n    outline: none;\n    padding: 0 10px;\n    width: 400px; }\n\n.developer-list {\n  display: grid;\n  grid-gap: 25px;\n  grid-template-columns: repeat(3, minmax(32%, 1fr)); }\n\n.developer {\n  border: solid .5px #2196f3;\n  border-radius: 5px;\n  margin: 5px;\n  padding: 20px 15px;\n  transition: 0.2s all ease; }\n  .developer:hover {\n    box-shadow: 0 10px 15px 0 rgba(0, 0, 0, 0.12), 0 10px 15px 0 rgba(0, 0, 0, 0.23);\n    cursor: pointer; }\n\n.profile-image {\n  border-radius: 50px;\n  width: 80px; }\n\n.dev {\n  display: flex; }\n  .dev .dev-avatar {\n    flex: 1.5;\n    text-align: center; }\n  .dev .dev-desc {\n    flex: 5; }\n    .dev .dev-desc .dev--name {\n      font-size: 18px;\n      font-weight: 300; }\n    .dev .dev-desc .dev-company, .dev .dev-desc .dev--company, .dev .dev-desc .dev--city, .dev .dev-desc .dev--email {\n      color: #313131;\n      font-size: 15px;\n      font-weight: 300; }\n    .dev .dev-desc .dev--company {\n      margin-top: 10px; }\n  .dev .dev--social {\n    align-self: start;\n    flex: 1;\n    text-align: right; }\n    .dev .dev--social img {\n      margin: 10px 0;\n      width: 25px; }\n\n.dev--skills {\n  margin-left: -5px; }\n  .dev--skills span {\n    -webkit-transition: color 0.2s;\n    background: #2196f3;\n    border-bottom: 0;\n    border-radius: 5px 0 0 5px;\n    color: #fff;\n    display: inline-block;\n    font-size: 11px;\n    height: 25px;\n    line-height: 26px;\n    margin: 5px;\n    padding: 1px 12px 0 15px;\n    position: relative;\n    text-decoration: none;\n    text-transform: uppercase;\n    user-select: none; }\n    .dev--skills span::before {\n      background: #fff;\n      border-radius: 10px;\n      box-shadow: inset 0 1px rgba(0, 0, 0, 0.25);\n      content: '';\n      height: 6px;\n      left: 5px;\n      position: absolute;\n      top: 10px;\n      width: 6px; }\n    .dev--skills span::after {\n      background: #fff;\n      border-bottom: 13px solid transparent;\n      border-left: 10px solid #2196f3;\n      border-top: 13px solid transparent;\n      content: '';\n      position: absolute;\n      right: 0;\n      top: 0; }\n\n.footer {\n  font-family: 'Roboto', sans-serif;\n  margin: 30px 0;\n  text-align: center; }\n  .footer .heart {\n    color: #f44336; }\n\n.button {\n  border: solid .5px #2196f3;\n  border-radius: 3px;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 5px;\n  transition: 0.2s all ease;\n  height: 35px;\n  width: 60px;\n  background: #fff; }\n  .button:hover {\n    box-shadow: 0 10px 15px 0 rgba(0, 0, 0, 0.12), 0 10px 15px 0 rgba(0, 0, 0, 0.23);\n    cursor: pointer; }\n  .button a {\n    -webkit-transition: color 0.2s;\n    background: #2196f3;\n    border-bottom: 0;\n    border-radius: 5px 0 0 5px;\n    color: #fff;\n    display: inline-block;\n    font-size: 11px;\n    height: 25px;\n    line-height: 26px;\n    margin: 5px;\n    padding: 1px 12px 0 15px;\n    position: relative;\n    text-decoration: none;\n    text-transform: uppercase;\n    user-select: none; }\n    .button a::before {\n      background: #fff;\n      border-radius: 10px;\n      box-shadow: inset 0 1px rgba(0, 0, 0, 0.25);\n      content: '';\n      height: 6px;\n      left: 5px;\n      position: absolute;\n      top: 10px;\n      width: 6px; }\n    .button a::after {\n      background: #fff;\n      border-bottom: 13px solid transparent;\n      border-left: 10px solid #2196f3;\n      border-top: 13px solid transparent;\n      content: '';\n      position: absolute;\n      right: 0;\n      top: 0; }\n\n.github-corner svg {\n  border: 0;\n  color: #fff;\n  fill: #151513;\n  position: absolute;\n  right: 0;\n  top: 0; }\n\n.github-corner:hover .octo-arm {\n  animation: octocat-wave 560ms ease-in-out;\n  transform-origin: 130px 106px; }\n\n@keyframes octocat-wave {\n  0%,\n  100% {\n    transform: rotate(0); }\n  20%,\n  60% {\n    transform: rotate(-25deg); }\n  40%,\n  80% {\n    transform: rotate(10deg); } }\n\n@media (max-width: 500px) {\n  .github-corner:hover .octo-arm {\n    animation: none; }\n  .github-corner .octo-arm {\n    animation: octocat-wave 560ms ease-in-out; } }\n\n@media screen and (max-width: 992px) {\n  .developer-list {\n    grid-template-columns: repeat(2, minmax(48%, 1fr)); } }\n\n@media screen and (max-width: 798px) {\n  .developer-list {\n    grid-template-columns: repeat(2, minmax(100%, 1fr)); } }\n",""])},"Yq+E":function(e,t,n){var a=n("XgI/");"string"==typeof a&&(a=[[e.i,a,""]]);var r={};r.transform=void 0;n("MTIv")(a,r);a.locals&&(e.exports=a.locals)},qYAe:function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}var r=n("U7vG"),o=a(r),i=n("O27J"),l=n("DOf8"),s=a(l);n("Yq+E"),(0,i.render)(o.default.createElement(s.default,null),document.getElementById("root"))}},["qYAe"]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,